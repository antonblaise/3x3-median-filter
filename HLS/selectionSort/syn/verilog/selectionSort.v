// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module selectionSort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputArray_address0,
        inputArray_ce0,
        inputArray_we0,
        inputArray_d0,
        inputArray_q0,
        inputArray_address1,
        inputArray_ce1,
        inputArray_we1,
        inputArray_d1,
        inputArray_q1
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] inputArray_address0;
output   inputArray_ce0;
output   inputArray_we0;
output  [31:0] inputArray_d0;
input  [31:0] inputArray_q0;
output  [3:0] inputArray_address1;
output   inputArray_ce1;
output   inputArray_we1;
output  [31:0] inputArray_d1;
input  [31:0] inputArray_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] inputArray_address0;
reg inputArray_ce0;
reg inputArray_we0;
reg[3:0] inputArray_address1;
reg inputArray_ce1;
reg inputArray_we1;

(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_438;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg   [31:0] reg_445;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state48;
wire   [3:0] inputArray_addr_reg_998;
wire   [0:0] grp_fu_432_p2;
reg   [0:0] tmp_7_reg_1010;
wire   [3:0] inputArray_addr_2_reg_1015;
wire   [1:0] j_0_min_idx_0_1_fu_482_p3;
reg   [1:0] j_0_min_idx_0_1_reg_1026;
wire    ap_CS_fsm_state3;
wire   [3:0] inputArray_addr_4_reg_1031;
wire   [1:0] j_0_min_idx_0_2_fu_495_p3;
reg   [1:0] j_0_min_idx_0_2_reg_1042;
wire    ap_CS_fsm_state4;
wire   [3:0] inputArray_addr_6_reg_1047;
wire   [2:0] j_0_min_idx_0_3_fu_510_p3;
reg   [2:0] j_0_min_idx_0_3_reg_1058;
wire    ap_CS_fsm_state5;
wire   [3:0] inputArray_addr_8_reg_1063;
wire   [2:0] j_0_min_idx_0_4_fu_523_p3;
reg   [2:0] j_0_min_idx_0_4_reg_1074;
wire    ap_CS_fsm_state6;
wire   [3:0] inputArray_addr_10_reg_1079;
wire   [2:0] j_0_min_idx_0_5_fu_535_p3;
reg   [2:0] j_0_min_idx_0_5_reg_1090;
wire    ap_CS_fsm_state7;
wire   [3:0] inputArray_addr_12_reg_1095;
wire   [2:0] j_0_min_idx_0_6_fu_547_p3;
reg   [2:0] j_0_min_idx_0_6_reg_1106;
wire    ap_CS_fsm_state8;
wire   [3:0] inputArray_addr_14_reg_1111;
reg   [3:0] inputArray_addr_16_reg_1122;
wire    ap_CS_fsm_state9;
wire   [0:0] grp_fu_450_p2;
reg   [0:0] tmp_5_1_reg_1128;
wire   [1:0] j_0_min_idx_1_1_fu_597_p3;
reg   [1:0] j_0_min_idx_1_1_reg_1138;
wire   [2:0] j_0_min_idx_1_2_fu_613_p3;
reg   [2:0] j_0_min_idx_1_2_reg_1148;
wire   [2:0] j_0_min_idx_1_3_fu_626_p3;
reg   [2:0] j_0_min_idx_1_3_reg_1158;
wire   [2:0] j_0_min_idx_1_4_fu_638_p3;
reg   [2:0] j_0_min_idx_1_4_reg_1168;
wire   [2:0] j_0_min_idx_1_5_fu_650_p3;
reg   [2:0] j_0_min_idx_1_5_reg_1178;
reg   [3:0] inputArray_addr_23_reg_1188;
wire    ap_CS_fsm_state19;
wire   [0:0] grp_fu_462_p2;
reg   [0:0] tmp_5_2_reg_1194;
wire   [2:0] j_0_min_idx_2_1_fu_700_p3;
reg   [2:0] j_0_min_idx_2_1_reg_1204;
wire   [2:0] j_0_min_idx_2_2_fu_713_p3;
reg   [2:0] j_0_min_idx_2_2_reg_1214;
wire   [2:0] j_0_min_idx_2_3_fu_725_p3;
reg   [2:0] j_0_min_idx_2_3_reg_1224;
wire   [2:0] j_0_min_idx_2_4_fu_737_p3;
reg   [2:0] j_0_min_idx_2_4_reg_1234;
reg   [3:0] inputArray_addr_29_reg_1244;
wire    ap_CS_fsm_state28;
reg   [0:0] tmp_5_3_reg_1250;
wire   [2:0] j_0_min_idx_3_1_fu_787_p3;
reg   [2:0] j_0_min_idx_3_1_reg_1260;
wire   [2:0] j_0_min_idx_3_2_fu_800_p3;
reg   [2:0] j_0_min_idx_3_2_reg_1270;
wire   [2:0] j_0_min_idx_3_3_fu_812_p3;
reg   [2:0] j_0_min_idx_3_3_reg_1280;
reg   [3:0] inputArray_addr_34_reg_1290;
wire    ap_CS_fsm_state36;
reg   [0:0] tmp_5_4_reg_1296;
wire   [2:0] j_0_min_idx_4_1_fu_862_p3;
reg   [2:0] j_0_min_idx_4_1_reg_1306;
wire   [2:0] j_0_min_idx_4_2_fu_875_p3;
reg   [2:0] j_0_min_idx_4_2_reg_1316;
reg   [3:0] inputArray_addr_38_reg_1326;
wire    ap_CS_fsm_state43;
reg   [0:0] tmp_5_5_reg_1332;
wire   [2:0] j_0_min_idx_5_1_fu_925_p3;
reg   [2:0] j_0_min_idx_5_1_reg_1342;
reg   [3:0] inputArray_addr_41_reg_1352;
wire    ap_CS_fsm_state49;
reg   [0:0] tmp_5_6_reg_1358;
reg   [3:0] inputArray_addr_43_reg_1368;
wire    ap_CS_fsm_state54;
reg   [3:0] inputArray_addr_44_reg_1374;
wire   [63:0] tmp_4_0_1_fu_474_p1;
wire   [63:0] tmp_4_0_s_fu_490_p1;
wire   [63:0] tmp_4_0_2_fu_502_p1;
wire   [63:0] tmp_4_0_3_fu_518_p1;
wire   [63:0] tmp_4_0_4_fu_530_p1;
wire   [63:0] tmp_4_0_6_fu_542_p1;
wire   [63:0] tmp_4_0_7_fu_554_p1;
wire   [63:0] tmp_fu_570_p1;
wire   [63:0] tmp_4_1_cast_cast_fu_575_p3;
wire   [63:0] tmp_4_1_1_fu_605_p1;
wire   [63:0] tmp_4_1_2_fu_621_p1;
wire   [63:0] tmp_4_1_3_fu_633_p1;
wire   [63:0] tmp_4_1_4_fu_645_p1;
wire   [63:0] tmp_4_1_6_fu_657_p1;
wire   [63:0] tmp_s_fu_673_p1;
wire   [63:0] tmp_4_2_cast_cast_fu_678_p3;
wire   [63:0] tmp_4_2_1_fu_708_p1;
wire   [63:0] tmp_4_2_2_fu_720_p1;
wire   [63:0] tmp_4_2_3_fu_732_p1;
wire   [63:0] tmp_4_2_4_fu_744_p1;
wire   [63:0] tmp_2_fu_760_p1;
wire   [63:0] tmp_4_3_cast_cast_fu_765_p3;
wire   [63:0] tmp_4_3_1_fu_795_p1;
wire   [63:0] tmp_4_3_2_fu_807_p1;
wire   [63:0] tmp_4_3_3_fu_819_p1;
wire   [63:0] tmp_5_fu_835_p1;
wire   [63:0] tmp_4_4_cast_cast_fu_840_p3;
wire   [63:0] tmp_4_4_1_fu_870_p1;
wire   [63:0] tmp_4_4_2_fu_882_p1;
wire   [63:0] tmp_8_fu_898_p1;
wire   [63:0] tmp_4_5_cast_cast_fu_903_p3;
wire   [63:0] tmp_4_5_1_fu_933_p1;
wire   [63:0] tmp_10_fu_949_p1;
wire   [63:0] tmp_4_6_cast_cast_fu_954_p3;
wire   [63:0] tmp_12_fu_984_p1;
wire   [63:0] tmp_7_cast_cast_fu_989_p3;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state60;
wire   [1:0] j_0_min_idx_cast_fu_479_p1;
wire   [2:0] j_0_min_idx_0_2_cast_fu_507_p1;
wire   [3:0] j_0_min_idx_0_6_cast_fu_559_p1;
wire   [3:0] j_0_min_idx_0_7_fu_562_p3;
wire   [0:0] grp_fu_456_p2;
wire   [0:0] tmp_1_fu_592_p2;
wire   [1:0] j_0_min_idx_1_fu_584_p3;
wire   [2:0] j_0_min_idx_1_1_cast_fu_610_p1;
wire   [3:0] j_0_min_idx_1_5_cast_fu_662_p1;
wire   [3:0] j_0_min_idx_1_6_fu_665_p3;
wire   [0:0] grp_fu_468_p2;
wire   [0:0] tmp_3_fu_695_p2;
wire   [2:0] j_0_min_idx_2_fu_687_p3;
wire   [3:0] j_0_min_idx_2_4_cast_fu_749_p1;
wire   [3:0] j_0_min_idx_2_5_fu_752_p3;
wire   [0:0] tmp_4_fu_782_p2;
wire   [2:0] j_0_min_idx_3_fu_774_p3;
wire   [3:0] j_0_min_idx_3_3_cast_fu_824_p1;
wire   [3:0] j_0_min_idx_3_4_fu_827_p3;
wire   [0:0] tmp_6_fu_857_p2;
wire   [2:0] j_0_min_idx_4_fu_849_p3;
wire   [3:0] j_0_min_idx_4_2_cast_fu_887_p1;
wire   [3:0] j_0_min_idx_4_3_fu_890_p3;
wire   [0:0] tmp_9_fu_920_p2;
wire   [2:0] j_0_min_idx_5_cast_c_fu_912_p3;
wire   [3:0] j_0_min_idx_5_1_cast_fu_938_p1;
wire   [3:0] j_0_min_idx_5_2_fu_941_p3;
wire   [0:0] tmp_11_fu_971_p2;
wire   [3:0] j_0_min_idx_6_fu_963_p3;
wire   [3:0] j_0_min_idx_6_1_fu_976_p3;
reg   [59:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_438 <= inputArray_q0;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_438 <= inputArray_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_445 <= inputArray_q0;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_445 <= inputArray_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        inputArray_addr_16_reg_1122 <= tmp_fu_570_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        inputArray_addr_23_reg_1188 <= tmp_s_fu_673_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        inputArray_addr_29_reg_1244 <= tmp_2_fu_760_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        inputArray_addr_34_reg_1290 <= tmp_5_fu_835_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        inputArray_addr_38_reg_1326 <= tmp_8_fu_898_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        inputArray_addr_41_reg_1352 <= tmp_10_fu_949_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        inputArray_addr_43_reg_1368 <= tmp_12_fu_984_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        inputArray_addr_44_reg_1374 <= tmp_7_cast_cast_fu_989_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_min_idx_0_1_reg_1026 <= j_0_min_idx_0_1_fu_482_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_min_idx_0_2_reg_1042 <= j_0_min_idx_0_2_fu_495_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_min_idx_0_3_reg_1058 <= j_0_min_idx_0_3_fu_510_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_min_idx_0_4_reg_1074 <= j_0_min_idx_0_4_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_min_idx_0_5_reg_1090 <= j_0_min_idx_0_5_fu_535_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_min_idx_0_6_reg_1106 <= j_0_min_idx_0_6_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_0_min_idx_1_1_reg_1138 <= j_0_min_idx_1_1_fu_597_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_min_idx_1_2_reg_1148 <= j_0_min_idx_1_2_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_0_min_idx_1_3_reg_1158 <= j_0_min_idx_1_3_fu_626_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_0_min_idx_1_4_reg_1168 <= j_0_min_idx_1_4_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_0_min_idx_1_5_reg_1178 <= j_0_min_idx_1_5_fu_650_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_0_min_idx_2_1_reg_1204 <= j_0_min_idx_2_1_fu_700_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_0_min_idx_2_2_reg_1214 <= j_0_min_idx_2_2_fu_713_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_min_idx_2_3_reg_1224 <= j_0_min_idx_2_3_fu_725_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_0_min_idx_2_4_reg_1234 <= j_0_min_idx_2_4_fu_737_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        j_0_min_idx_3_1_reg_1260 <= j_0_min_idx_3_1_fu_787_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        j_0_min_idx_3_2_reg_1270 <= j_0_min_idx_3_2_fu_800_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        j_0_min_idx_3_3_reg_1280 <= j_0_min_idx_3_3_fu_812_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_0_min_idx_4_1_reg_1306[1 : 0] <= j_0_min_idx_4_1_fu_862_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j_0_min_idx_4_2_reg_1316[1 : 0] <= j_0_min_idx_4_2_fu_875_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j_0_min_idx_5_1_reg_1342[1 : 0] <= j_0_min_idx_5_1_fu_925_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_5_1_reg_1128 <= grp_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_5_2_reg_1194 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_5_3_reg_1250 <= grp_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_5_4_reg_1296 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_5_5_reg_1332 <= grp_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_5_6_reg_1358 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_7_reg_1010 <= grp_fu_432_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        inputArray_address0 = inputArray_addr_44_reg_1374;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        inputArray_address0 = tmp_12_fu_984_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        inputArray_address0 = inputArray_addr_41_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        inputArray_address0 = tmp_4_5_1_fu_933_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        inputArray_address0 = tmp_4_5_cast_cast_fu_903_p3;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        inputArray_address0 = tmp_8_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        inputArray_address0 = inputArray_addr_34_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        inputArray_address0 = tmp_4_3_3_fu_819_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        inputArray_address0 = tmp_4_3_2_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        inputArray_address0 = tmp_4_3_1_fu_795_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        inputArray_address0 = tmp_4_3_cast_cast_fu_765_p3;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        inputArray_address0 = inputArray_addr_2_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        inputArray_address0 = tmp_2_fu_760_p1;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state52))) begin
        inputArray_address0 = inputArray_addr_14_reg_1111;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state40))) begin
        inputArray_address0 = inputArray_addr_12_reg_1095;
    end else if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state39))) begin
        inputArray_address0 = inputArray_addr_10_reg_1079;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state23))) begin
        inputArray_address0 = inputArray_addr_8_reg_1063;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state22))) begin
        inputArray_address0 = inputArray_addr_6_reg_1047;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state31))) begin
        inputArray_address0 = inputArray_addr_4_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        inputArray_address0 = inputArray_addr_23_reg_1188;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        inputArray_address0 = tmp_4_1_6_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        inputArray_address0 = tmp_4_1_4_fu_645_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        inputArray_address0 = tmp_4_1_3_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        inputArray_address0 = tmp_4_1_2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        inputArray_address0 = tmp_4_1_1_fu_605_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        inputArray_address0 = tmp_4_1_cast_cast_fu_575_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        inputArray_address0 = inputArray_addr_reg_998;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        inputArray_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        inputArray_address0 = tmp_fu_570_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inputArray_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        inputArray_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        inputArray_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inputArray_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputArray_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inputArray_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputArray_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        inputArray_address0 = 64'd1;
    end else begin
        inputArray_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        inputArray_address1 = tmp_7_cast_cast_fu_989_p3;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        inputArray_address1 = inputArray_addr_43_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        inputArray_address1 = tmp_4_6_cast_cast_fu_954_p3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        inputArray_address1 = tmp_10_fu_949_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        inputArray_address1 = inputArray_addr_38_reg_1326;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        inputArray_address1 = tmp_4_4_2_fu_882_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        inputArray_address1 = tmp_4_4_1_fu_870_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        inputArray_address1 = tmp_4_4_cast_cast_fu_840_p3;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        inputArray_address1 = tmp_5_fu_835_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        inputArray_address1 = inputArray_addr_29_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        inputArray_address1 = tmp_4_2_4_fu_744_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        inputArray_address1 = tmp_4_2_3_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        inputArray_address1 = tmp_4_2_2_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        inputArray_address1 = tmp_4_2_1_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        inputArray_address1 = tmp_4_2_cast_cast_fu_678_p3;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        inputArray_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        inputArray_address1 = tmp_s_fu_673_p1;
    end else if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state47))) begin
        inputArray_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46))) begin
        inputArray_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state32))) begin
        inputArray_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state31))) begin
        inputArray_address1 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state13))) begin
        inputArray_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state12))) begin
        inputArray_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state22))) begin
        inputArray_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inputArray_address1 = inputArray_addr_16_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inputArray_address1 = tmp_4_0_7_fu_554_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        inputArray_address1 = tmp_4_0_6_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        inputArray_address1 = tmp_4_0_4_fu_530_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        inputArray_address1 = tmp_4_0_3_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        inputArray_address1 = tmp_4_0_2_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inputArray_address1 = tmp_4_0_s_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inputArray_address1 = tmp_4_0_1_fu_474_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        inputArray_address1 = 64'd0;
    end else begin
        inputArray_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        inputArray_ce0 = 1'b1;
    end else begin
        inputArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        inputArray_ce1 = 1'b1;
    end else begin
        inputArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state20))) begin
        inputArray_we0 = 1'b1;
    end else begin
        inputArray_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state10))) begin
        inputArray_we1 = 1'b1;
    end else begin
        inputArray_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_432_p2 = (($signed(inputArray_q0) < $signed(inputArray_q1)) ? 1'b1 : 1'b0);

assign grp_fu_450_p2 = (($signed(reg_438) < $signed(inputArray_q0)) ? 1'b1 : 1'b0);

assign grp_fu_456_p2 = (($signed(reg_445) < $signed(inputArray_q0)) ? 1'b1 : 1'b0);

assign grp_fu_462_p2 = (($signed(reg_438) < $signed(inputArray_q1)) ? 1'b1 : 1'b0);

assign grp_fu_468_p2 = (($signed(reg_445) < $signed(inputArray_q1)) ? 1'b1 : 1'b0);

assign inputArray_addr_10_reg_1079 = 64'd6;

assign inputArray_addr_12_reg_1095 = 64'd7;

assign inputArray_addr_14_reg_1111 = 64'd8;

assign inputArray_addr_2_reg_1015 = 64'd2;

assign inputArray_addr_4_reg_1031 = 64'd3;

assign inputArray_addr_6_reg_1047 = 64'd4;

assign inputArray_addr_8_reg_1063 = 64'd5;

assign inputArray_addr_reg_998 = 64'd1;

assign inputArray_d0 = reg_438;

assign inputArray_d1 = reg_438;

assign j_0_min_idx_0_1_fu_482_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 2'd2 : j_0_min_idx_cast_fu_479_p1);

assign j_0_min_idx_0_2_cast_fu_507_p1 = j_0_min_idx_0_2_reg_1042;

assign j_0_min_idx_0_2_fu_495_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 2'd3 : j_0_min_idx_0_1_reg_1026);

assign j_0_min_idx_0_3_fu_510_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 3'd4 : j_0_min_idx_0_2_cast_fu_507_p1);

assign j_0_min_idx_0_4_fu_523_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 3'd5 : j_0_min_idx_0_3_reg_1058);

assign j_0_min_idx_0_5_fu_535_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 3'd6 : j_0_min_idx_0_4_reg_1074);

assign j_0_min_idx_0_6_cast_fu_559_p1 = j_0_min_idx_0_6_reg_1106;

assign j_0_min_idx_0_6_fu_547_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 3'd7 : j_0_min_idx_0_5_reg_1090);

assign j_0_min_idx_0_7_fu_562_p3 = ((grp_fu_432_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_0_6_cast_fu_559_p1);

assign j_0_min_idx_1_1_cast_fu_610_p1 = j_0_min_idx_1_1_reg_1138;

assign j_0_min_idx_1_1_fu_597_p3 = ((tmp_1_fu_592_p2[0:0] === 1'b1) ? j_0_min_idx_1_fu_584_p3 : 2'd1);

assign j_0_min_idx_1_2_fu_613_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd4 : j_0_min_idx_1_1_cast_fu_610_p1);

assign j_0_min_idx_1_3_fu_626_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd5 : j_0_min_idx_1_2_reg_1148);

assign j_0_min_idx_1_4_fu_638_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd6 : j_0_min_idx_1_3_reg_1158);

assign j_0_min_idx_1_5_cast_fu_662_p1 = j_0_min_idx_1_5_reg_1178;

assign j_0_min_idx_1_5_fu_650_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd7 : j_0_min_idx_1_4_reg_1168);

assign j_0_min_idx_1_6_fu_665_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_1_5_cast_fu_662_p1);

assign j_0_min_idx_1_fu_584_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign j_0_min_idx_2_1_fu_700_p3 = ((tmp_3_fu_695_p2[0:0] === 1'b1) ? j_0_min_idx_2_fu_687_p3 : 3'd2);

assign j_0_min_idx_2_2_fu_713_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd5 : j_0_min_idx_2_1_reg_1204);

assign j_0_min_idx_2_3_fu_725_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd6 : j_0_min_idx_2_2_reg_1214);

assign j_0_min_idx_2_4_cast_fu_749_p1 = j_0_min_idx_2_4_reg_1234;

assign j_0_min_idx_2_4_fu_737_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd7 : j_0_min_idx_2_3_reg_1224);

assign j_0_min_idx_2_5_fu_752_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_2_4_cast_fu_749_p1);

assign j_0_min_idx_2_fu_687_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign j_0_min_idx_3_1_fu_787_p3 = ((tmp_4_fu_782_p2[0:0] === 1'b1) ? j_0_min_idx_3_fu_774_p3 : 3'd3);

assign j_0_min_idx_3_2_fu_800_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd6 : j_0_min_idx_3_1_reg_1260);

assign j_0_min_idx_3_3_cast_fu_824_p1 = j_0_min_idx_3_3_reg_1280;

assign j_0_min_idx_3_3_fu_812_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd7 : j_0_min_idx_3_2_reg_1270);

assign j_0_min_idx_3_4_fu_827_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_3_3_cast_fu_824_p1);

assign j_0_min_idx_3_fu_774_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign j_0_min_idx_4_1_fu_862_p3 = ((tmp_6_fu_857_p2[0:0] === 1'b1) ? j_0_min_idx_4_fu_849_p3 : 3'd4);

assign j_0_min_idx_4_2_cast_fu_887_p1 = j_0_min_idx_4_2_reg_1316;

assign j_0_min_idx_4_2_fu_875_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd7 : j_0_min_idx_4_1_reg_1306);

assign j_0_min_idx_4_3_fu_890_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_4_2_cast_fu_887_p1);

assign j_0_min_idx_4_fu_849_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign j_0_min_idx_5_1_cast_fu_938_p1 = j_0_min_idx_5_1_reg_1342;

assign j_0_min_idx_5_1_fu_925_p3 = ((tmp_9_fu_920_p2[0:0] === 1'b1) ? j_0_min_idx_5_cast_c_fu_912_p3 : 3'd5);

assign j_0_min_idx_5_2_fu_941_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 4'd8 : j_0_min_idx_5_1_cast_fu_938_p1);

assign j_0_min_idx_5_cast_c_fu_912_p3 = ((grp_fu_456_p2[0:0] === 1'b1) ? 3'd7 : 3'd6);

assign j_0_min_idx_6_1_fu_976_p3 = ((tmp_11_fu_971_p2[0:0] === 1'b1) ? j_0_min_idx_6_fu_963_p3 : 4'd6);

assign j_0_min_idx_6_fu_963_p3 = ((grp_fu_468_p2[0:0] === 1'b1) ? 4'd8 : 4'd7);

assign j_0_min_idx_cast_fu_479_p1 = tmp_7_reg_1010;

assign tmp_10_fu_949_p1 = j_0_min_idx_5_2_fu_941_p3;

assign tmp_11_fu_971_p2 = (tmp_5_6_reg_1358 | grp_fu_468_p2);

assign tmp_12_fu_984_p1 = j_0_min_idx_6_1_fu_976_p3;

assign tmp_1_fu_592_p2 = (tmp_5_1_reg_1128 | grp_fu_456_p2);

assign tmp_2_fu_760_p1 = j_0_min_idx_2_5_fu_752_p3;

assign tmp_3_fu_695_p2 = (tmp_5_2_reg_1194 | grp_fu_468_p2);

assign tmp_4_0_1_fu_474_p1 = grp_fu_432_p2;

assign tmp_4_0_2_fu_502_p1 = j_0_min_idx_0_2_fu_495_p3;

assign tmp_4_0_3_fu_518_p1 = j_0_min_idx_0_3_fu_510_p3;

assign tmp_4_0_4_fu_530_p1 = j_0_min_idx_0_4_fu_523_p3;

assign tmp_4_0_6_fu_542_p1 = j_0_min_idx_0_5_fu_535_p3;

assign tmp_4_0_7_fu_554_p1 = j_0_min_idx_0_6_fu_547_p3;

assign tmp_4_0_s_fu_490_p1 = j_0_min_idx_0_1_fu_482_p3;

assign tmp_4_1_1_fu_605_p1 = j_0_min_idx_1_1_fu_597_p3;

assign tmp_4_1_2_fu_621_p1 = j_0_min_idx_1_2_fu_613_p3;

assign tmp_4_1_3_fu_633_p1 = j_0_min_idx_1_3_fu_626_p3;

assign tmp_4_1_4_fu_645_p1 = j_0_min_idx_1_4_fu_638_p3;

assign tmp_4_1_6_fu_657_p1 = j_0_min_idx_1_5_fu_650_p3;

assign tmp_4_1_cast_cast_fu_575_p3 = ((grp_fu_450_p2[0:0] === 1'b1) ? 64'd2 : 64'd1);

assign tmp_4_2_1_fu_708_p1 = j_0_min_idx_2_1_fu_700_p3;

assign tmp_4_2_2_fu_720_p1 = j_0_min_idx_2_2_fu_713_p3;

assign tmp_4_2_3_fu_732_p1 = j_0_min_idx_2_3_fu_725_p3;

assign tmp_4_2_4_fu_744_p1 = j_0_min_idx_2_4_fu_737_p3;

assign tmp_4_2_cast_cast_fu_678_p3 = ((grp_fu_462_p2[0:0] === 1'b1) ? 64'd3 : 64'd2);

assign tmp_4_3_1_fu_795_p1 = j_0_min_idx_3_1_fu_787_p3;

assign tmp_4_3_2_fu_807_p1 = j_0_min_idx_3_2_fu_800_p3;

assign tmp_4_3_3_fu_819_p1 = j_0_min_idx_3_3_fu_812_p3;

assign tmp_4_3_cast_cast_fu_765_p3 = ((grp_fu_450_p2[0:0] === 1'b1) ? 64'd4 : 64'd3);

assign tmp_4_4_1_fu_870_p1 = j_0_min_idx_4_1_fu_862_p3;

assign tmp_4_4_2_fu_882_p1 = j_0_min_idx_4_2_fu_875_p3;

assign tmp_4_4_cast_cast_fu_840_p3 = ((grp_fu_462_p2[0:0] === 1'b1) ? 64'd5 : 64'd4);

assign tmp_4_5_1_fu_933_p1 = j_0_min_idx_5_1_fu_925_p3;

assign tmp_4_5_cast_cast_fu_903_p3 = ((grp_fu_450_p2[0:0] === 1'b1) ? 64'd6 : 64'd5);

assign tmp_4_6_cast_cast_fu_954_p3 = ((grp_fu_462_p2[0:0] === 1'b1) ? 64'd7 : 64'd6);

assign tmp_4_fu_782_p2 = (tmp_5_3_reg_1250 | grp_fu_456_p2);

assign tmp_5_fu_835_p1 = j_0_min_idx_3_4_fu_827_p3;

assign tmp_6_fu_857_p2 = (tmp_5_4_reg_1296 | grp_fu_468_p2);

assign tmp_7_cast_cast_fu_989_p3 = ((grp_fu_450_p2[0:0] === 1'b1) ? 64'd8 : 64'd7);

assign tmp_8_fu_898_p1 = j_0_min_idx_4_3_fu_890_p3;

assign tmp_9_fu_920_p2 = (tmp_5_5_reg_1332 | grp_fu_456_p2);

assign tmp_fu_570_p1 = j_0_min_idx_0_7_fu_562_p3;

assign tmp_s_fu_673_p1 = j_0_min_idx_1_6_fu_665_p3;

always @ (posedge ap_clk) begin
    j_0_min_idx_4_1_reg_1306[2] <= 1'b1;
    j_0_min_idx_4_2_reg_1316[2] <= 1'b1;
    j_0_min_idx_5_1_reg_1342[2] <= 1'b1;
end

endmodule //selectionSort
