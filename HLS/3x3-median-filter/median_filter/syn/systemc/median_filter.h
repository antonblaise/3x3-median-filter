// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _median_filter_HH_
#define _median_filter_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "insertionSort.h"

namespace ap_rtl {

struct median_filter : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > window_address0;
    sc_out< sc_logic > window_ce0;
    sc_out< sc_logic > window_we0;
    sc_out< sc_lv<32> > window_d0;
    sc_in< sc_lv<32> > window_q0;
    sc_out< sc_lv<4> > window_address1;
    sc_out< sc_logic > window_ce1;
    sc_out< sc_logic > window_we1;
    sc_out< sc_lv<32> > window_d1;
    sc_in< sc_lv<32> > window_q1;
    sc_out< sc_lv<32> > median;
    sc_out< sc_logic > median_ap_vld;


    // Module declarations
    median_filter(sc_module_name name);
    SC_HAS_PROCESS(median_filter);

    ~median_filter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    insertionSort* grp_insertionSort_fu_40;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_insertionSort_fu_40_ap_start;
    sc_signal< sc_logic > grp_insertionSort_fu_40_ap_done;
    sc_signal< sc_logic > grp_insertionSort_fu_40_ap_idle;
    sc_signal< sc_logic > grp_insertionSort_fu_40_ap_ready;
    sc_signal< sc_lv<4> > grp_insertionSort_fu_40_inputArray_address0;
    sc_signal< sc_logic > grp_insertionSort_fu_40_inputArray_ce0;
    sc_signal< sc_logic > grp_insertionSort_fu_40_inputArray_we0;
    sc_signal< sc_lv<32> > grp_insertionSort_fu_40_inputArray_d0;
    sc_signal< sc_lv<4> > grp_insertionSort_fu_40_inputArray_address1;
    sc_signal< sc_logic > grp_insertionSort_fu_40_inputArray_ce1;
    sc_signal< sc_logic > grp_insertionSort_fu_40_inputArray_we1;
    sc_signal< sc_lv<32> > grp_insertionSort_fu_40_inputArray_d1;
    sc_signal< sc_logic > grp_insertionSort_fu_40_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_insertionSort_fu_40_ap_start();
    void thread_median();
    void thread_median_ap_vld();
    void thread_window_address0();
    void thread_window_address1();
    void thread_window_ce0();
    void thread_window_ce1();
    void thread_window_d0();
    void thread_window_d1();
    void thread_window_we0();
    void thread_window_we1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
