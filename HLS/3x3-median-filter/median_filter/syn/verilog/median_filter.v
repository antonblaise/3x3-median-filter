// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="median_filter,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.701250,HLS_SYN_LAT=83,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=366,HLS_SYN_LUT=1263,HLS_VERSION=2018_3}" *)

module median_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_address0,
        window_ce0,
        window_we0,
        window_d0,
        window_q0,
        window_address1,
        window_ce1,
        window_we1,
        window_d1,
        window_q1,
        median,
        median_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] window_address0;
output   window_ce0;
output   window_we0;
output  [31:0] window_d0;
input  [31:0] window_q0;
output  [3:0] window_address1;
output   window_ce1;
output   window_we1;
output  [31:0] window_d1;
input  [31:0] window_q1;
output  [31:0] median;
output   median_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] window_address0;
reg window_ce0;
reg window_we0;
reg window_ce1;
reg window_we1;
reg median_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    grp_insertionSort_fu_40_ap_start;
wire    grp_insertionSort_fu_40_ap_done;
wire    grp_insertionSort_fu_40_ap_idle;
wire    grp_insertionSort_fu_40_ap_ready;
wire   [3:0] grp_insertionSort_fu_40_inputArray_address0;
wire    grp_insertionSort_fu_40_inputArray_ce0;
wire    grp_insertionSort_fu_40_inputArray_we0;
wire   [31:0] grp_insertionSort_fu_40_inputArray_d0;
wire   [3:0] grp_insertionSort_fu_40_inputArray_address1;
wire    grp_insertionSort_fu_40_inputArray_ce1;
wire    grp_insertionSort_fu_40_inputArray_we1;
wire   [31:0] grp_insertionSort_fu_40_inputArray_d1;
reg    grp_insertionSort_fu_40_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_insertionSort_fu_40_ap_start_reg = 1'b0;
end

insertionSort grp_insertionSort_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_insertionSort_fu_40_ap_start),
    .ap_done(grp_insertionSort_fu_40_ap_done),
    .ap_idle(grp_insertionSort_fu_40_ap_idle),
    .ap_ready(grp_insertionSort_fu_40_ap_ready),
    .inputArray_address0(grp_insertionSort_fu_40_inputArray_address0),
    .inputArray_ce0(grp_insertionSort_fu_40_inputArray_ce0),
    .inputArray_we0(grp_insertionSort_fu_40_inputArray_we0),
    .inputArray_d0(grp_insertionSort_fu_40_inputArray_d0),
    .inputArray_q0(window_q0),
    .inputArray_address1(grp_insertionSort_fu_40_inputArray_address1),
    .inputArray_ce1(grp_insertionSort_fu_40_inputArray_ce1),
    .inputArray_we1(grp_insertionSort_fu_40_inputArray_we1),
    .inputArray_d1(grp_insertionSort_fu_40_inputArray_d1),
    .inputArray_q1(window_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_insertionSort_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_insertionSort_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_insertionSort_fu_40_ap_ready == 1'b1)) begin
            grp_insertionSort_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        median_ap_vld = 1'b1;
    end else begin
        median_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        window_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_address0 = grp_insertionSort_fu_40_inputArray_address0;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        window_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        window_ce0 = grp_insertionSort_fu_40_inputArray_ce0;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        window_ce1 = grp_insertionSort_fu_40_inputArray_ce1;
    end else begin
        window_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        window_we0 = grp_insertionSort_fu_40_inputArray_we0;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        window_we1 = grp_insertionSort_fu_40_inputArray_we1;
    end else begin
        window_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_insertionSort_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_insertionSort_fu_40_ap_start = grp_insertionSort_fu_40_ap_start_reg;

assign median = window_q0;

assign window_address1 = grp_insertionSort_fu_40_inputArray_address1;

assign window_d0 = grp_insertionSort_fu_40_inputArray_d0;

assign window_d1 = grp_insertionSort_fu_40_inputArray_d1;

endmodule //median_filter
