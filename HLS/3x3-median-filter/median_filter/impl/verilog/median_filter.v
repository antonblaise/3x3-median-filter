// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="median_filter,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.795000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=89,HLS_SYN_LUT=170,HLS_VERSION=2018_3}" *)

module median_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_address0,
        window_ce0,
        window_we0,
        window_d0,
        window_q0,
        median,
        median_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] window_address0;
output   window_ce0;
output   window_we0;
output  [31:0] window_d0;
input  [31:0] window_q0;
output  [31:0] median;
output   median_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] window_address0;
reg window_ce0;
reg window_we0;
reg[31:0] window_d0;
reg median_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_i_cast_fu_105_p1;
reg   [4:0] i_i_cast_reg_165;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_109_p2;
reg   [31:0] key_reg_183;
wire    ap_CS_fsm_state3;
wire  signed [31:0] j_0_in_i_cast_fu_120_p1;
reg  signed [31:0] j_0_in_i_cast_reg_189;
wire    ap_CS_fsm_state4;
wire  signed [4:0] j_fu_124_p2;
reg  signed [4:0] j_reg_194;
wire   [0:0] tmp_1_i_fu_134_p2;
reg   [0:0] tmp_1_i_reg_199;
wire   [3:0] i_fu_159_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_3_i_fu_145_p2;
reg   [3:0] i_i_reg_83;
reg  signed [4:0] j_0_in_i_reg_95;
wire   [63:0] tmp_i_fu_115_p1;
wire   [63:0] tmp_2_i_fu_140_p1;
wire   [63:0] tmp_6_i_fu_150_p1;
wire  signed [63:0] tmp_4_i_fu_154_p1;
wire    ap_CS_fsm_state6;
wire  signed [31:0] j_cast_fu_130_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0)))) begin
        i_i_reg_83 <= i_fu_159_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_83 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_i_fu_145_p2 == 1'd1) & (tmp_1_i_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_in_i_reg_95 <= j_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_in_i_reg_95 <= i_i_cast_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_i_cast_reg_165[3 : 0] <= i_i_cast_fu_105_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_in_i_cast_reg_189 <= j_0_in_i_cast_fu_120_p1;
        j_reg_194 <= j_fu_124_p2;
        tmp_1_i_reg_199 <= tmp_1_i_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_reg_183 <= window_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        median_ap_vld = 1'b1;
    end else begin
        median_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0)))) begin
        window_address0 = tmp_4_i_fu_154_p1;
    end else if (((tmp_3_i_fu_145_p2 == 1'd1) & (tmp_1_i_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        window_address0 = tmp_6_i_fu_150_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        window_address0 = tmp_2_i_fu_140_p1;
    end else if (((exitcond_i_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        window_address0 = 64'd4;
    end else if (((exitcond_i_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        window_address0 = tmp_i_fu_115_p1;
    end else begin
        window_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((tmp_3_i_fu_145_p2 == 1'd1) & (tmp_1_i_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & ((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0))) | ((exitcond_i_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond_i_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        window_ce0 = 1'b1;
    end else begin
        window_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if (((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0))) begin
            window_d0 = key_reg_183;
        end else if (((tmp_3_i_fu_145_p2 == 1'd1) & (tmp_1_i_reg_199 == 1'd1))) begin
            window_d0 = window_q0;
        end else begin
            window_d0 = 'bx;
        end
    end else begin
        window_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_3_i_fu_145_p2 == 1'd1) & (tmp_1_i_reg_199 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & ((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0))))) begin
        window_we0 = 1'b1;
    end else begin
        window_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((tmp_3_i_fu_145_p2 == 1'd0) | (tmp_1_i_reg_199 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign exitcond_i_fu_109_p2 = ((i_i_reg_83 == 4'd9) ? 1'b1 : 1'b0);

assign i_fu_159_p2 = (i_i_reg_83 + 4'd1);

assign i_i_cast_fu_105_p1 = i_i_reg_83;

assign j_0_in_i_cast_fu_120_p1 = j_0_in_i_reg_95;

assign j_cast_fu_130_p1 = j_fu_124_p2;

assign j_fu_124_p2 = ($signed(j_0_in_i_reg_95) + $signed(5'd31));

assign median = window_q0;

assign tmp_1_i_fu_134_p2 = (($signed(j_0_in_i_reg_95) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign tmp_2_i_fu_140_p1 = $unsigned(j_cast_fu_130_p1);

assign tmp_3_i_fu_145_p2 = (($signed(window_q0) > $signed(key_reg_183)) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_154_p1 = j_0_in_i_reg_95;

assign tmp_6_i_fu_150_p1 = $unsigned(j_0_in_i_cast_reg_189);

assign tmp_i_fu_115_p1 = i_i_reg_83;

always @ (posedge ap_clk) begin
    i_i_cast_reg_165[4] <= 1'b0;
end

endmodule //median_filter
